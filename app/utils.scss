@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

$columns: 6 !default;
$gaps: 3 !default;
$breakpoints: (
  phone: 0rem,
  tablet: 37.5rem,
  laptop: 56.25rem,
  desktop: 75rem
) !default;
$colors: () !default;
$tokens: () !default;

@mixin with-breakpoint($breakpoint) {
  $width: map.get($breakpoints, $breakpoint);

  @if $width > 0 {
    @media (min-width: #{$width}) {
      @content
    }
  } @else {
    @content
  }
}

@function -generate-shades($start, $end, $shades) {
  $result: ();
  $length: list.length($shades);
  $min: math.min($shades...);
  $max: math.max($shades...);

  @each $shade in $shades {
    $weight: if($length > 1, math.percentage((($shade - $max) * math.div(1, $min - $max))), 0%);
    $result: map.set($result, $shade, color.mix($start, $end, $weight));
  }

  @return $result;
}

@function -generate-palette() {
  $result: ();

  @each $color, $config in $colors {
    $colors: map.get($config, colors);
    $start: list.nth($colors, 1);
    $end: list.nth($colors, 2);
    $shades: map.get($config, shades);
    $result: map.set($result, $color, -generate-shades($start, $end, $shades));
  }

  @return $result;
}

@function -get-color($token, $theme) {
  $colors: map.get($tokens, $token);
  $color: if(meta.type-of($colors) == 'map', map.get($colors, $theme), $colors);

  @if meta.type-of($color) == 'string' {
    $color: -get-color($color, $theme);
  }

  @return $color;
}

@function -from-palette($color, $palette) {
  $name: list.nth($color, 1);
  $shade: list.nth($color, 2);

  @return map.get(map.get($palette, $name), $shade);
}

@mixin with-colors() {
  $palette: -generate-palette();

  @each $token in map.keys($tokens) {
    $light: -get-color($token, light);
    $dark: -get-color($token, dark);

    --#{$token}: light-dark(#{-from-palette($light, $palette)}, #{-from-palette($dark, $palette)});
  }
}
